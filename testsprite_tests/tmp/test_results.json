[
  {
    "projectId": "4d0a0374-4f04-4c4a-b987-a6f089c6c3a9",
    "testId": "d27967ae-7967-43ce-bb57-b081a6c3510b",
    "userId": "b428c458-30b1-7040-d2fe-c4b54b347ea1",
    "title": "TC001-test_user_registration_api",
    "description": "Verify that the user registration API endpoint /api/auth/register successfully registers a new user with valid email, password, first name, and last name, and returns a 200 status code.",
    "code": "import requests\nimport uuid\n\nBASE_URL = \"http://localhost:8000\"\nREGISTER_ENDPOINT = \"/api/auth/register\"\nTIMEOUT = 30\n\ndef test_user_registration_api():\n    url = BASE_URL + REGISTER_ENDPOINT\n    unique_email = f\"testuser_{uuid.uuid4()}@example.com\"\n    payload = {\n        \"email\": unique_email,\n        \"password\": \"StrongPassw0rd!\",\n        \"first_name\": \"Test\",\n        \"last_name\": \"User\"\n    }\n    headers = {\n        \"Content-Type\": \"application/json\"\n    }\n    try:\n        response = requests.post(url, json=payload, headers=headers, timeout=TIMEOUT)\n    except requests.RequestException as e:\n        assert False, f\"Request to register user failed: {e}\"\n\n    assert response.status_code == 200, f\"Expected status code 200, got {response.status_code}\"\n    # Optionally check response content if API returns any (not specified)\n\ntest_user_registration_api()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 28, in <module>\n  File \"<string>\", line 25, in test_user_registration_api\nAssertionError: Expected status code 200, got 404\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-08T22:55:15.178Z",
    "modified": "2025-10-08T22:56:02.553Z"
  },
  {
    "projectId": "4d0a0374-4f04-4c4a-b987-a6f089c6c3a9",
    "testId": "1292c5a1-9ddc-4a76-b5a8-364434dc8db0",
    "userId": "b428c458-30b1-7040-d2fe-c4b54b347ea1",
    "title": "TC002-test_user_login_api",
    "description": "Verify that the user login API endpoint /api/auth/login authenticates a user with valid email and password credentials and returns a 200 status code.",
    "code": "import requests\n\ndef test_user_login_api():\n    base_url = \"http://localhost:8000\"\n    login_endpoint = f\"{base_url}/api/auth/login\"\n    headers = {\n        \"Content-Type\": \"application/json\"\n    }\n    # Example valid credentials for testing\n    payload = {\n        \"email\": \"testuser@example.com\",\n        \"password\": \"TestPassword123!\"\n    }\n\n    try:\n        response = requests.post(login_endpoint, json=payload, headers=headers, timeout=30)\n    except requests.RequestException as e:\n        assert False, f\"Request to login endpoint failed: {e}\"\n\n    assert response.status_code == 200, f\"Expected status code 200 but got {response.status_code}\"\n    # Optionally check response content for authentication token or success message\n    try:\n        json_response = response.json()\n    except ValueError:\n        assert False, \"Response is not a valid JSON\"\n\n    # Basic validation: presence of token or similar field expected in login response\n    assert \"token\" in json_response or \"access_token\" in json_response or \"user\" in json_response, \\\n        \"Login response does not contain expected authentication information\"\n\ntest_user_login_api()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 31, in <module>\n  File \"<string>\", line 20, in test_user_login_api\nAssertionError: Expected status code 200 but got 401\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-08T22:55:15.185Z",
    "modified": "2025-10-08T22:56:02.562Z"
  },
  {
    "projectId": "4d0a0374-4f04-4c4a-b987-a6f089c6c3a9",
    "testId": "fc2e3c94-85a6-475b-8ccd-c98c83ef0bed",
    "userId": "b428c458-30b1-7040-d2fe-c4b54b347ea1",
    "title": "TC003-test_get_current_user_info_api",
    "description": "Verify that the API endpoint /api/auth/me returns the current authenticated user's information when provided with a valid Bearer token.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8000\"\nTIMEOUT = 30\n\n# Provide a valid user email and password registered in the system for testing login\nTEST_USER_EMAIL = \"testuser@example.com\"\nTEST_USER_PASSWORD = \"TestUserPassword123!\"\n\ndef test_get_current_user_info_api():\n    login_url = f\"{BASE_URL}/api/auth/login\"\n    me_url = f\"{BASE_URL}/api/auth/me\"\n\n    try:\n        # Login to get Bearer token\n        login_payload = {\n            \"email\": TEST_USER_EMAIL,\n            \"password\": TEST_USER_PASSWORD\n        }\n        login_resp = requests.post(login_url, json=login_payload, timeout=TIMEOUT)\n        assert login_resp.status_code == 200, f\"Login failed with status code {login_resp.status_code}\"\n        login_data = login_resp.json()\n        token = login_data.get(\"access_token\") or login_data.get(\"token\") or login_data.get(\"accessToken\")\n        assert token, \"Bearer token not found in login response\"\n\n        headers = {\n            \"Authorization\": f\"Bearer {token}\"\n        }\n\n        # Request current user info\n        me_resp = requests.get(me_url, headers=headers, timeout=TIMEOUT)\n        assert me_resp.status_code == 200, f\"/api/auth/me returned status code {me_resp.status_code}\"\n        user_info = me_resp.json()\n        assert isinstance(user_info, dict), \"User info response is not a JSON object\"\n        # Basic checks on expected keys that a user info should contain\n        assert \"email\" in user_info, \"User info does not contain 'email'\"\n        assert user_info[\"email\"] == TEST_USER_EMAIL, \"Returned user email does not match logged in user\"\n    except requests.RequestException as e:\n        assert False, f\"HTTP request failed: {e}\"\n\ntest_get_current_user_info_api()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 41, in <module>\n  File \"<string>\", line 21, in test_get_current_user_info_api\nAssertionError: Login failed with status code 401\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-08T22:55:15.190Z",
    "modified": "2025-10-08T22:55:57.731Z"
  },
  {
    "projectId": "4d0a0374-4f04-4c4a-b987-a6f089c6c3a9",
    "testId": "7892f81c-fb36-43c7-8099-bfa0c765ccff",
    "userId": "b428c458-30b1-7040-d2fe-c4b54b347ea1",
    "title": "TC004-test_get_all_services_api",
    "description": "Verify that the API endpoint /api/services returns a list of all cleaning services available, including both standard and a-la-carte services, with a 200 status code.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8000\"\nTIMEOUT = 30\n\ndef test_get_all_services_api():\n    url = f\"{BASE_URL}/api/services\"\n    headers = {\n        \"Accept\": \"application/json\"\n    }\n    try:\n        response = requests.get(url, headers=headers, timeout=TIMEOUT)\n        assert response.status_code == 200, f\"Expected status code 200, got {response.status_code}\"\n        data = response.json()\n        assert isinstance(data, list), \"Response is not a list\"\n        # Basic check: each item should at least have an identifier or name (loosely checking keys)\n        for service in data:\n            assert isinstance(service, dict), \"Service item is not a dictionary\"\n            # We expect both standard and a-la-carte, so maybe check keys presence loosely\n            assert 'id' in service or 'name' in service or 'type' in service, \"Service item missing expected keys\"\n    except requests.exceptions.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\ntest_get_all_services_api()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 24, in <module>\n  File \"<string>\", line 13, in test_get_all_services_api\nAssertionError: Expected status code 200, got 404\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-08T22:55:15.195Z",
    "modified": "2025-10-08T22:55:45.977Z"
  },
  {
    "projectId": "4d0a0374-4f04-4c4a-b987-a6f089c6c3a9",
    "testId": "8ed10177-d283-4848-9185-0df24d5c523f",
    "userId": "b428c458-30b1-7040-d2fe-c4b54b347ea1",
    "title": "TC005-test_get_standard_services_api",
    "description": "Verify that the API endpoint /api/services/standard returns a list of standard cleaning services with a 200 status code.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8000\"\nSTANDARD_SERVICES_ENDPOINT = \"/api/services/standard\"\nTIMEOUT = 30\n\ndef test_get_standard_services_api():\n    url = BASE_URL + STANDARD_SERVICES_ENDPOINT\n    headers = {\n        \"Accept\": \"application/json\"\n    }\n    try:\n        response = requests.get(url, headers=headers, timeout=TIMEOUT)\n        response.raise_for_status()\n    except requests.RequestException as e:\n        assert False, f\"Request to get standard services failed: {e}\"\n\n    assert response.status_code == 200, f\"Expected status code 200 but got {response.status_code}\"\n\n    try:\n        services = response.json()\n    except ValueError as e:\n        assert False, f\"Response is not valid JSON: {e}\"\n\n    assert isinstance(services, list), f\"Expected response to be a list but got {type(services).__name__}\"\n    # Additional checks could be implemented here to verify schema if available\n\ntest_get_standard_services_api()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"<string>\", line 14, in test_get_standard_services_api\n  File \"/var/task/requests/models.py\", line 1024, in raise_for_status\n    raise HTTPError(http_error_msg, response=self)\nrequests.exceptions.HTTPError: 404 Client Error: Not Found for url: http://localhost:8000/api/services/standard\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 28, in <module>\n  File \"<string>\", line 16, in test_get_standard_services_api\nAssertionError: Request to get standard services failed: 404 Client Error: Not Found for url: http://localhost:8000/api/services/standard\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-08T22:55:15.200Z",
    "modified": "2025-10-08T22:55:57.722Z"
  },
  {
    "projectId": "4d0a0374-4f04-4c4a-b987-a6f089c6c3a9",
    "testId": "7308808a-eabd-4d67-b6ff-838daef9aae2",
    "userId": "b428c458-30b1-7040-d2fe-c4b54b347ea1",
    "title": "TC006-test_get_a_la_carte_services_api",
    "description": "Verify that the API endpoint /api/services/a-la-carte returns a list of a-la-carte cleaning services with a 200 status code.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8000\"\nTIMEOUT = 30\n\ndef test_get_a_la_carte_services_api():\n    url = f\"{BASE_URL}/api/services/a-la-carte\"\n    headers = {\n        \"Accept\": \"application/json\"\n    }\n    try:\n        response = requests.get(url, headers=headers, timeout=TIMEOUT)\n    except requests.RequestException as e:\n        assert False, f\"Request to {url} failed: {e}\"\n    \n    assert response.status_code == 200, f\"Expected status code 200 but got {response.status_code}\"\n    try:\n        data = response.json()\n    except ValueError:\n        assert False, \"Response is not valid JSON\"\n    \n    assert isinstance(data, list), f\"Expected response to be a list but got {type(data)}\"\n    \n    # Optional: further validation of list content could be here if schema is known\n\ntest_get_a_la_carte_services_api()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 26, in <module>\n  File \"<string>\", line 16, in test_get_a_la_carte_services_api\nAssertionError: Expected status code 200 but got 404\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-08T22:55:15.205Z",
    "modified": "2025-10-08T22:55:45.963Z"
  },
  {
    "projectId": "4d0a0374-4f04-4c4a-b987-a6f089c6c3a9",
    "testId": "da3be269-c8e5-4a70-b617-482a960b7a7e",
    "userId": "b428c458-30b1-7040-d2fe-c4b54b347ea1",
    "title": "TC007-test_get_pricing_for_house_size_and_frequency_api",
    "description": "Verify that the API endpoint /api/pricing/{house_size}/{frequency} returns correct dynamic pricing information based on valid house size and service frequency parameters with a 200 status code.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8000\"\nTIMEOUT = 30\n\ndef test_get_pricing_for_house_size_and_frequency_api():\n    house_size = \"medium\"\n    frequency = \"weekly\"\n    url = f\"{BASE_URL}/api/pricing/{house_size}/{frequency}\"\n    headers = {\n        \"Accept\": \"application/json\",\n    }\n    try:\n        response = requests.get(url, headers=headers, timeout=TIMEOUT)\n        assert response.status_code == 200, f\"Expected status code 200 but got {response.status_code}\"\n        json_data = response.json()\n        # Basic validation: response should be a dict/object containing pricing info\n        assert isinstance(json_data, dict), \"Response JSON is not a dictionary\"\n        # Check presence of expected keys that might appear in pricing info, e.g. price or similar\n        # Since no specific schema given beyond dynamic pricing info, assert presence of at least one key\n        assert len(json_data) > 0, \"Pricing information is empty\"\n    except requests.exceptions.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\ntest_get_pricing_for_house_size_and_frequency_api()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 25, in <module>\n  File \"<string>\", line 15, in test_get_pricing_for_house_size_and_frequency_api\nAssertionError: Expected status code 200 but got 404\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-08T22:55:15.210Z",
    "modified": "2025-10-08T22:55:54.334Z"
  },
  {
    "projectId": "4d0a0374-4f04-4c4a-b987-a6f089c6c3a9",
    "testId": "9d4cdcfe-b8a6-4b99-a0f5-4b3fc120b1ee",
    "userId": "b428c458-30b1-7040-d2fe-c4b54b347ea1",
    "title": "TC008-test_get_room_pricing_information_api",
    "description": "Verify that the API endpoint /api/room-pricing returns detailed room pricing information with a 200 status code.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8000\"\nTIMEOUT = 30\n\ndef test_get_room_pricing_information_api():\n    url = f\"{BASE_URL}/api/room-pricing\"\n    headers = {\n        \"Accept\": \"application/json\"\n    }\n    try:\n        response = requests.get(url, headers=headers, timeout=TIMEOUT)\n        assert response.status_code == 200, f\"Expected 200 OK, got {response.status_code}\"\n        data = response.json()\n        # Validate that the response contains pricing details (basic structure check)\n        assert isinstance(data, dict), \"Response JSON should be an object\"\n        assert len(data) > 0, \"Response JSON should not be empty\"\n    except requests.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\ntest_get_room_pricing_information_api()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 21, in <module>\n  File \"<string>\", line 13, in test_get_room_pricing_information_api\nAssertionError: Expected 200 OK, got 404\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-08T22:55:15.215Z",
    "modified": "2025-10-08T22:55:57.720Z"
  },
  {
    "projectId": "4d0a0374-4f04-4c4a-b987-a6f089c6c3a9",
    "testId": "8b2ff536-9139-49f2-a906-ba083881f386",
    "userId": "b428c458-30b1-7040-d2fe-c4b54b347ea1",
    "title": "TC009-test_create_new_booking_api",
    "description": "Verify that the API endpoint /api/bookings successfully creates a new booking when provided with valid service ID, customer email, customer name, date, and time, returning a 200 status code.",
    "code": "import requests\nfrom datetime import datetime, timedelta\n\nBASE_URL = \"http://localhost:8000\"\nTIMEOUT = 30\n\ndef test_create_new_booking_api():\n    # Step 1: Get list of services to obtain a valid service_id\n    services_url = f\"{BASE_URL}/api/services\"\n    try:\n        services_response = requests.get(services_url, timeout=TIMEOUT)\n        services_response.raise_for_status()\n        services_data = services_response.json()\n        assert isinstance(services_data, list) and len(services_data) > 0, \"No services found\"\n        service_id = services_data[0].get(\"id\") or services_data[0].get(\"_id\") or services_data[0].get(\"service_id\")\n        assert service_id, \"Service ID not found in service data\"\n    except (requests.RequestException, AssertionError) as e:\n        raise Exception(f\"Failed to get valid service_id for booking creation: {e}\")\n\n    # Prepare booking data\n    customer_email = \"testcustomer@example.com\"\n    customer_name = \"Test Customer\"\n    date = (datetime.utcnow() + timedelta(days=2)).strftime(\"%Y-%m-%d\")\n    time = \"10:00\"\n\n    booking_payload = {\n        \"service_id\": service_id,\n        \"customer_email\": customer_email,\n        \"customer_name\": customer_name,\n        \"date\": date,\n        \"time\": time\n    }\n\n    booking_url = f\"{BASE_URL}/api/bookings\"\n    headers = {\n        \"Content-Type\": \"application/json\"\n    }\n\n    booking_id = None\n    try:\n        response = requests.post(booking_url, json=booking_payload, headers=headers, timeout=TIMEOUT)\n        response.raise_for_status()\n        assert response.status_code == 200, f\"Expected status code 200, got {response.status_code}\"\n        resp_json = response.json()\n        # Expecting some identification of created booking in response; try to fetch booking id if present\n        booking_id = resp_json.get(\"id\") or resp_json.get(\"_id\") or resp_json.get(\"booking_id\")\n    except (requests.RequestException, AssertionError) as e:\n        raise AssertionError(f\"Booking creation failed: {e}\")\n    finally:\n        # Clean up: delete the booking if the API supports deletion (no info about delete in PRD)\n        if booking_id:\n            try:\n                delete_url = f\"{BASE_URL}/api/bookings/{booking_id}\"\n                del_resp = requests.delete(delete_url, timeout=TIMEOUT)\n                # Accept 200 or 204 as success deletion status code if delete implemented\n                if del_resp.status_code not in (200, 204):\n                    pass  # No assertion on deletion, just clean up silently\n            except requests.RequestException:\n                pass\n\ntest_create_new_booking_api()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"<string>\", line 12, in test_create_new_booking_api\n  File \"/var/task/requests/models.py\", line 1024, in raise_for_status\n    raise HTTPError(http_error_msg, response=self)\nrequests.exceptions.HTTPError: 404 Client Error: Not Found for url: http://localhost:8000/api/services\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 61, in <module>\n  File \"<string>\", line 18, in test_create_new_booking_api\nException: Failed to get valid service_id for booking creation: 404 Client Error: Not Found for url: http://localhost:8000/api/services\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-08T22:55:15.220Z",
    "modified": "2025-10-08T22:55:59.224Z"
  },
  {
    "projectId": "4d0a0374-4f04-4c4a-b987-a6f089c6c3a9",
    "testId": "478e522a-f544-4772-b73a-49764a2bd5a1",
    "userId": "b428c458-30b1-7040-d2fe-c4b54b347ea1",
    "title": "TC010-test_get_user_bookings_api",
    "description": "Verify that the API endpoint /api/bookings with GET method returns a list of bookings for the authenticated user when provided with a valid Bearer token, returning a 200 status code.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8000\"\nTIMEOUT = 30\n\n# Placeholder for a valid Bearer token for authentication\nVALID_BEARER_TOKEN = \"your_valid_bearer_token_here\"\n\ndef test_get_user_bookings_api():\n    url = f\"{BASE_URL}/api/bookings\"\n    headers = {\n        \"Authorization\": f\"Bearer {VALID_BEARER_TOKEN}\",\n        \"Accept\": \"application/json\"\n    }\n    try:\n        response = requests.get(url, headers=headers, timeout=TIMEOUT)\n        # Assert the status code is 200 OK\n        assert response.status_code == 200, f\"Expected status 200 but got {response.status_code}\"\n        data = response.json()\n        # Assert the response JSON is a list (of bookings)\n        assert isinstance(data, list), \"Response JSON is not a list of bookings\"\n    except requests.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\ntest_get_user_bookings_api()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 25, in <module>\n  File \"<string>\", line 18, in test_get_user_bookings_api\nAssertionError: Expected status 200 but got 404\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-08T22:55:15.225Z",
    "modified": "2025-10-08T22:56:02.557Z"
  }
]
